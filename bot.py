import os
import subprocess
import requests
import zipfile
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# ================== CONFIG ==================
BOT_TOKEN = os.getenv("BOT_TOKEN")  # Railway Config Variables
RESOURCES_URL = "https://drive.google.com/file/d/1TQOJhgDtQkFeJRGDhmjc9nMgbqefOkOv/view?usp=drivesdk"  # Link Google Drive tr·ª±c ti·∫øp
ZIP_FILE = "resources.zip"
RESOURCE_DIR = "resources"
OUTPUT_DIR = os.path.join(RESOURCE_DIR, "output")

# ================== AUTO DOWNLOAD RESOURCES ==================
if not os.path.exists(RESOURCE_DIR):
    print("üîΩ Downloading resources...")
    r = requests.get(RESOURCES_URL, stream=True)
    with open(ZIP_FILE, "wb") as f:
        for chunk in r.iter_content(chunk_size=8192):
            f.write(chunk)

    print("üìÇ Extracting resources...")
    with zipfile.ZipFile(ZIP_FILE, 'r') as zip_ref:
        zip_ref.extractall(".")
    print("‚úÖ Resources ready.")

# T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
os.makedirs(OUTPUT_DIR, exist_ok=True)

# ================== BOT COMMANDS ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["Ch·∫°y Tool"], ["H∆∞·ªõng d·∫´n", "Th√¥ng tin"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "Xin ch√†o! ƒê√¢y l√† bot tool AOV üî•\nCh·ªçn ch·ª©c nƒÉng b√™n d∆∞·ªõi:",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text == "Ch·∫°y Tool":
        await update.message.reply_text("üîÑ ƒêang ch·∫°y tool, vui l√≤ng ch·ªù...")

        # G·ªçi tool g·ªëc
        process = subprocess.run(
            ["python3", "lbdxaov.py"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        # G·ª≠i log output
        if process.stdout:
            await update.message.reply_text(f"‚úÖ Tool ho√†n th√†nh:\n{process.stdout[:3500]}")
        if process.stderr:
            await update.message.reply_text(f"‚ö†Ô∏è C√≥ l·ªói:\n{process.stderr[:3500]}")

        # G·ª≠i file t·ª´ output n·∫øu c√≥
        files = os.listdir(OUTPUT_DIR)
        if files:
            for file in files:
                file_path = os.path.join(OUTPUT_DIR, file)
                await update.message.reply_document(open(file_path, "rb"))
        else:
            await update.message.reply_text("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file output n√†o!")

    elif text == "H∆∞·ªõng d·∫´n":
        await update.message.reply_text("üìò H∆∞·ªõng d·∫´n:\n1. Nh·∫•n 'Ch·∫°y Tool'\n2. Nh·∫≠p t√†i kho·∫£n & m·∫≠t kh·∫©u\n3. Nh·∫≠n file k·∫øt qu·∫£")

    elif text == "Th√¥ng tin":
        await update.message.reply_text("ü§ñ Bot Tool AOV by Railway\nLi√™n h·ªá admin ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.")

    else:
        await update.message.reply_text("‚ùì Kh√¥ng hi·ªÉu l·ªánh, vui l√≤ng ch·ªçn trong menu.")

# ================== MAIN ==================
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()